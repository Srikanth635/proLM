"""
Knowledge graph exporter for various RDF formats
"""

from typing import Dict, Any, Optional
from pathlib import Path

from .base_exporter import FileExporter
from ..models import ObjectDescription
from ..knowledge_graph.visualizer import KnowledgeGraphVisualizer
from ..knowledge_graph.soma_kg import SOMAKnowledgeGraph


class KnowledgeGraphExporter(FileExporter):
    """Exports knowledge graphs in various formats"""

    def __init__(self, output_dir: Path):
        super().__init__(output_dir, "ttl")

    async def export(self,
                     object_description: ObjectDescription,
                     knowledge_graph_turtle: Optional[str] = None,
                     metadata: Dict[str, Any] = None) -> str:
        """Export knowledge graph in Turtle format"""

        if not knowledge_graph_turtle:
            self.logger.warning("No knowledge graph provided for export")
            return await self._create_empty_kg_file(object_description)

        # Generate filename
        safe_name = "".join(c for c in object_description.name if c.isalnum() or c in (' ', '-', '_')).strip()
        safe_name = safe_name.replace(' ', '_').lower()
        filename = self._generate_filename(f"knowledge_graph_{safe_name}", "ttl", timestamp=False)

        # Add metadata header to turtle content
        enhanced_turtle = self._add_metadata_header(knowledge_graph_turtle, object_description, metadata)

        # Write turtle file
        turtle_path = self._write_file(enhanced_turtle, filename)

        # Also create visualization if possible
        try:
            await self._create_visualization(knowledge_graph_turtle, object_description)
        except Exception as e:
            self.logger.warning(f"Could not create visualization: {e}")

        return turtle_path

    async def _create_empty_kg_file(self, object_description: ObjectDescription) -> str:
        """Create an empty knowledge graph file with explanation"""

        empty_content = f"""# SOMA Knowledge Graph for {object_description.name}
# Generated: {object_description.timestamp or 'Unknown'}
# Status: No knowledge graph was generated during analysis

@prefix soma: <http://www.ease-crc.org/ont/SOMA.owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix instance: <http://example.org/instances#> .

# No triples available - knowledge graph generation may have failed
# or been disabled during analysis.
"""

        safe_name = "".join(c for c in object_description.name if c.isalnum() or c in (' ', '-', '_')).strip()
        safe_name = safe_name.replace(' ', '_').lower()
        filename = self._generate_filename(f"knowledge_graph_{safe_name}_empty", "ttl", timestamp=False)

        return self._write_file(empty_content, filename)

    def _add_metadata_header(self,
                             turtle_content: str,
                             object_description: ObjectDescription,
                             metadata: Dict[str, Any]) -> str:
        """Add metadata header to turtle content"""

        header = f"""# SOMA Knowledge Graph for {object_description.name}
# Generated by SOMA Object Analysis System
# Timestamp: {object_description.timestamp or 'Unknown'}
# Confidence: {object_description.confidence_score:.2%}
# Category: {object_description.semantic.category.value}
#
# This knowledge graph represents the object analysis results
# using the SOMA (Socio-physical Model of Activities) ontology.
#
# Metadata: {metadata or 'None'}

"""

        return header + turtle_content

    async def _create_visualization(self,
                                    turtle_content: str,
                                    object_description: ObjectDescription):
        """Create interactive visualization of the knowledge graph"""

        try:
            # Reconstruct knowledge graph from turtle (simplified approach)
            # In a real implementation, you'd parse the turtle properly
            from ..knowledge_graph.generator import KnowledgeGraphGenerator

            kg_gen = KnowledgeGraphGenerator()
            kg = kg_gen.create_from_object_description(object_description)

            # Create visualizer
            visualizer = KnowledgeGraphVisualizer(kg)

            # Generate filename for visualization
            safe_name = "".join(c for c in object_description.name if c.isalnum() or c in (' ', '-', '_')).strip()
            safe_name = safe_name.replace(' ', '_').lower()

            # Create HTML visualization
            viz_filename = self.output_dir / f"knowledge_graph_visualization_{safe_name}.html"
            visualizer.create_html_visualization(
                str(viz_filename),
                f"Knowledge Graph: {object_description.name}"
            )

            self.logger.info(f"Created knowledge graph visualization: {viz_filename}")

        except Exception as e:
            self.logger.error(f"Failed to create visualization: {e}")
            raise


class RDFXMLExporter(KnowledgeGraphExporter):
    """Exports knowledge graphs in RDF/XML format"""

    def __init__(self, output_dir: Path):
        super().__init__(output_dir)
        self.file_extension = "rdf"

    async def export(self,
                     object_description: ObjectDescription,
                     knowledge_graph_turtle: Optional[str] = None,
                     metadata: Dict[str, Any] = None) -> str:
        """Export knowledge graph in RDF/XML format"""

        if not knowledge_graph_turtle:
            return await self._create_empty_rdf_file(object_description)

        # Convert turtle to RDF/XML (simplified conversion)
        rdf_xml_content = self._turtle_to_rdf_xml(knowledge_graph_turtle, object_description, metadata)

        # Generate filename
        safe_name = "".join(c for c in object_description.name if c.isalnum() or c in (' ', '-', '_')).strip()
        safe_name = safe_name.replace(' ', '_').lower()
        filename = self._generate_filename(f"knowledge_graph_{safe_name}", "rdf", timestamp=False)

        return self._write_file(rdf_xml_content, filename)

    def _turtle_to_rdf_xml(self,
                           turtle_content: str,
                           object_description: ObjectDescription,
                           metadata: Dict[str, Any]) -> str:
        """Convert turtle to RDF/XML format (simplified)"""

        # This is a simplified conversion - in practice you'd use an RDF library like rdflib
        rdf_xml = f"""<?xml version="1.0" encoding="UTF-8"?>
<rdf:RDF 
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
    xmlns:soma="http://www.ease-crc.org/ont/SOMA.owl#"
    xmlns:instance="http://example.org/instances#">

    <!-- Generated from SOMA Object Analysis System -->
    <!-- Object: {object_description.name} -->
    <!-- Confidence: {object_description.confidence_score:.2%} -->

    <!-- RDF/XML representation would be generated here -->
    <!-- This is a placeholder - full conversion requires RDF parsing -->

</rdf:RDF>"""

        return rdf_xml

    async def _create_empty_rdf_file(self, object_description: ObjectDescription) -> str:
        """Create empty RDF/XML file"""

        empty_rdf = f"""<?xml version="1.0" encoding="UTF-8"?>
<rdf:RDF 
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
    xmlns:soma="http://www.ease-crc.org/ont/SOMA.owl#"
    xmlns:instance="http://example.org/instances#">

    <!-- No knowledge graph data available for {object_description.name} -->

</rdf:RDF>"""

        safe_name = "".join(c for c in object_description.name if c.isalnum() or c in (' ', '-', '_')).strip()
        safe_name = safe_name.replace(' ', '_').lower()
        filename = self._generate_filename(f"knowledge_graph_{safe_name}_empty", "rdf", timestamp=False)

        return self._write_file(empty_rdf, filename)


class JSONLDKGExporter(KnowledgeGraphExporter):
    """Exports knowledge graphs in JSON-LD format"""

    def __init__(self, output_dir: Path):
        super().__init__(output_dir)
        self.file_extension = "jsonld"

    async def export(self,
                     object_description: ObjectDescription,
                     knowledge_graph_turtle: Optional[str] = None,
                     metadata: Dict[str, Any] = None) -> str:
        """Export knowledge graph in JSON-LD format"""

        # Create JSON-LD representation
        jsonld_content = self._create_jsonld_kg(object_description, knowledge_graph_turtle, metadata)

        # Generate filename
        safe_name = "".join(c for c in object_description.name if c.isalnum() or c in (' ', '-', '_')).strip()
        safe_name = safe_name.replace(' ', '_').lower()
        filename = self._generate_filename(f"knowledge_graph_{safe_name}", "jsonld", timestamp=False)

        import json
        json_content = json.dumps(jsonld_content, indent=2, ensure_ascii=False)

        return self._write_file(json_content, filename)

    def _create_jsonld_kg(self,
                          object_description: ObjectDescription,
                          turtle_content: Optional[str],
                          metadata: Dict[str, Any]) -> Dict[str, Any]:
        """Create JSON-LD representation of knowledge graph"""

        context = {
            "@vocab": "http://www.ease-crc.org/ont/SOMA.owl#",
            "soma": "http://www.ease-crc.org/ont/SOMA.owl#",
            "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
            "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
            "instance": "http://example.org/instances#"
        }

        if not turtle_content:
            return {
                "@context": context,
                "@graph": [],
                "metadata": {
                    "note": f"No knowledge graph available for {object_description.name}",
                    "analysis_metadata": metadata or {}
                }
            }

        # Simplified JSON-LD structure
        # In practice, you'd parse the turtle and convert properly
        graph_data = {
            "@context": context,
            "@graph": [
                {
                    "@id": f"instance:{object_description.name.replace(' ', '_').lower()}",
                    "@type": object_description.semantic.category.value,
                    "rdfs:label": object_description.name,
                    "rdfs:comment": object_description.description,
                    "soma:hasConfidenceScore": object_description.confidence_score
                }
            ],
            "metadata": {
                "source": "SOMA Object Analysis System",
                "timestamp": object_description.timestamp,
                "turtle_available": True,
                "analysis_metadata": metadata or {}
            }
        }

        return graph_data